version: '3.9'

services:
  ngrok:
    image: ngrok/ngrok:alpine
    env_file:
      - ../.env/.dev.env
    command: ["http", "proxy:443", "--domain", "$NGROK_DOMAIN"]

  proxy:
    depends_on:
      - headman_bot
    build:
      dockerfile: Dockerfile
      context: ../nginx
    ports:
      - 443:443

  headman_bot:
    env_file:
      - ../.env/.dev.env
    build: 
      dockerfile: ./docker/Dockerfile
      context: ..
    depends_on:
      redis:
        condition: service_started
      postgres:
          condition: service_healthy
    volumes:
      - ../logs:/app/logs
      - ../update_info.html:/app/update_info.html
    ports: 
      - 8080:8080

  postgres:
    image: postgres:16.1-alpine3.19
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    restart: always
    env_file:
      - ../.env/.database.dev.env
    volumes:
      - headman_bot_postgres_dev_data:/var/lib/postgresql/data
      - ../postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ../postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 3s
      timeout: 5s
      retries: 10


  redis:
    image: redis:7.2.3
    restart: on-failure
    ports:
      - 6379:6379

volumes:
  headman_bot_postgres_dev_data:
