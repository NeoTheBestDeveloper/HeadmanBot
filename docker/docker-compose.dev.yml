version: '3.9'

services:
  ngrok:
    image: ngrok/ngrok:alpine
    env_file:
      - ../.env/.dev.env
    command: ["http", "proxy:80", "--domain", "$NGROK_DOMAIN"]

  proxy:
    depends_on:
      - headman_bot
    build:
      dockerfile: Dockerfile.dev
      context: ../nginx
    ports:
      - 80:80

  headman_bot:
    command: python -m src
    env_file:
      - ../.env/.dev.env
    build: 
      dockerfile: ./docker/Dockerfile.dev
      context: ..
    depends_on:
      redis:
        condition: service_healthy
      postgres:
          condition: service_healthy
      celery_worker:
        condition: service_healthy
    volumes:
      - ../logs:/app/logs
    ports: 
      - 8000:8000

  postgres:
    image: postgres:16.1-alpine3.19
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    restart: always
    env_file:
      - ../.env/.database.dev.env
    volumes:
      - headman_bot_postgres_dev_data:/var/lib/postgresql/data
      - ../postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ../postgres/migrate.sh:/docker-entrypoint-initdb.d/init.sh
      - ../postgres/migrations:/docker-entrypoint-initdb.d/migrations
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 3s
      timeout: 5s
      retries: 10


  redis:
    image: redis:7.2.3
    restart: on-failure
    volumes:
      - headman_bot_redis_dev_data:/data
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 3s
      timeout: 5s
      retries: 10

  celery_worker:
    command: celery -A src.celery.worker.worker worker  --loglevel=info
    env_file:
      - ../.env/.dev.env
    build: 
      dockerfile: ./docker/Dockerfile.dev
      context: ..
    depends_on:
      redis:
        condition: service_healthy
      postgres:
          condition: service_healthy
    healthcheck:
      test: celery status
      interval: 3s
      timeout: 5s
      retries: 10
    volumes:
      - ../logs:/app/logs

  celery_beat:
    command: celery -A src.celery.worker.worker beat -S redbeat.RedBeatScheduler  --loglevel=info
    env_file:
      - ../.env/.dev.env
    build: 
      dockerfile: ./docker/Dockerfile.dev
      context: ..
    depends_on:
      redis:
        condition: service_healthy
      postgres:
          condition: service_healthy
    healthcheck:
      test: celery -A src.celery.worker status
      interval: 3s
      timeout: 5s
      retries: 10
    volumes:
      - ../logs:/app/logs

  flower:
    command: celery -A src.celery.worker.worker flower --port=5555
    env_file:
      - ../.env/.dev.env
    build: 
      dockerfile: ./docker/Dockerfile.dev
      context: ..
    depends_on:
      celery_worker:
        condition: service_healthy
      celery_beat:
        condition: service_healthy
    volumes:
      - ../logs:/app/logs
    ports:
      - 5555:5555
  

volumes:
  headman_bot_postgres_dev_data:
  headman_bot_redis_dev_data:
